import re
import requests
from typing import Dict
from random import choice, randint
import telebot
from telebot import types
from markup import reply_markup_start, reply_markup_end, reply_markup_new_game, reply_markup_help
import constants
from hangman_game import HangmanGame

bot = telebot.TeleBot(constants.TOKEN)
games: Dict[int, HangmanGame] = {}

film_list = ["–û–¥–Ω–∞–∂–¥—ã –≤ –ì–æ–ª–ª–∏–≤—É–¥–µ", "–°–µ–º—å –ø—Å–∏—Ö–æ–ø–∞—Ç–æ–≤", "–ë–æ–π—Ü–æ–≤—Å–∫–∏–π –∫–ª—É–±",
             "–¢—Ä–∏ –±–∏–ª–ª–±–æ—Ä–¥–∞ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –≠–±–±–∏–Ω–≥–∞ –∏ –ú–∏—Å—Å—É—Ä–∏", "–î–∏–∫–∏–µ –∏—Å—Ç–æ—Ä–∏–∏",
             "–ó–∞–ª–µ—á—å –Ω–∞ –¥–Ω–æ –≤ –ë—Ä—é–≥–≥–µ", "–ì–æ–ª–≥–æ—Ñ–∞", "–ë–æ–ª—å—à–∞—è –∞—Ñ–µ—Ä–∞",
             "–ë–æ–ª—å—à–æ–π –∫—É—à", "–û–¥–Ω–∞–∂–¥—ã –≤ –ò—Ä–ª–∞–Ω–¥–∏–∏", "–ì–Ω–µ–≤ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π",
             "–ö–∞—Ä—Ç—ã, –¥–µ–Ω—å–≥–∏, –¥–≤–∞ —Å—Ç–≤–æ–ª–∞", "–î–∂–µ–Ω—Ç–µ–ª—å–º–µ–Ω—ã", "–ë–æ–ª—å—à–æ–π –õ–µ–±–æ–≤—Å–∫–∏"]

book_list = ["–°–µ–º—å –Ω–∞–≤—ã–∫–æ–≤ –≤—ã—Å–æ–∫–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –ª—é–¥–µ–π", "–ë–æ–≥–∞—Ç—ã–π –ø–∞–ø–∞, –±–µ–¥–Ω—ã–π –ø–∞–ø–∞",
             "–í–ª–∞—Å—Ç–µ–ª–∏–Ω –ö–æ–ª–µ—Ü", "–•–æ–±–±–∏—Ç", "–ó–æ–≤ –ö—Ç—É–ª—Ö—É", "1984", "–í–æ—Å—å–º–æ–π –Ω–∞–≤—ã–∫"]

habr_list = ['https://habr.com/ru/post/245065/', 'https://habr.com/ru/post/302914/']

seq = [randint(240000, 600000) for _ in range(30)]
for i in range(len(seq)):
    try:
        response = requests.head('https://habr.com/ru/post/' + str(seq[i]))
        if response.status_code == 200:
            habr_list.append('https://habr.com/ru/post/' + str(seq[i]))
    except Exception as ex:
        print(ex)


@bot.message_handler(commands=['start'])
def start_command(message: telebot.types.Message) -> None:
    bot.send_photo(message.from_user.id, 'https://avatars.mds.yandex.net/get-zen_doc/1875939/'
                                         'pub_612e3698fc890f70eef3b674_612e36c5e9fa270869a2cb37/scale_1200')
    keyboard1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("/start")
    item2 = types.KeyboardButton("/help")
    keyboard1.add(item1)
    keyboard1.add(item2)
    bot.send_message(message.from_user.id, text='–£ –Ω–∞—Å –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –¥–ª—è —Ç–µ–±—è!', reply_markup=keyboard1)
    keyboard = types.InlineKeyboardMarkup()
    key_film = types.InlineKeyboardButton(text='–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?', callback_data='film')
    keyboard.add(key_film)
    key_book = types.InlineKeyboardButton(text='–ö–∞–∫—É—é –∫–Ω–∏–≥—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å?', callback_data='book')
    keyboard.add(key_book)
    key_hangman = types.InlineKeyboardButton(text='–°—ã–≥—Ä–∞—Ç—å –≤ –≤–∏—Å–µ–ª–∏—Ü—É', callback_data='hangman')
    keyboard.add(key_hangman)
    key_habr = types.InlineKeyboardButton(text='–°—Ç–∞—Ç—å—è —Å –•–∞–±—Ä–∞', callback_data='habr')
    keyboard.add(key_habr)
    bot.send_message(message.from_user.id, text='–í—ã–±–µ—Ä–∏:', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call: telebot.types.CallbackQuery) -> None:
    if call.data == "film":
        film_choice = choice(film_list)
        bot.send_message(call.from_user.id, "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–æ—Ç —Ñ–∏–ª—å–ºüëáüèª")
        bot.send_message(call.from_user.id, film_choice)
    elif call.data == "book":
        book_choice = choice(book_list)
        bot.send_message(call.from_user.id, "–ü–æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å —ç—Ç–æ–π –∫–Ω–∏–≥–æ–πüëáüèª")
        bot.send_message(call.from_user.id, book_choice)
    elif call.data == "hangman":
        show_choice(call.from_user.id, constants.START_TEXT, reply_markup_start)
    elif call.data == "habr":
        habr_choice = choice(habr_list)
        bot.send_message(call.from_user.id, "–ö—Ä–∞–π–Ω–µ –ø–æ–ª–µ–∑–Ω–∞—è —Å—Ç–∞—Ç—å—èüëáüèª")
        text = f'[–°—Ç–∞—Ç—å—è]({habr_choice})'
        bot.send_message(call.from_user.id, text, parse_mode='MarkdownV2')
    elif call.data == "yes":
        go_command(call.message.chat.id)
    elif call.data == "no":
        bot.send_message(call.message.chat.id, constants.GOODBYE_TEXT)
        start_command(call.message)
    elif call.data == "go":
        go_command(call.message.chat.id)
    elif call.data == "rules":
        rules_command(call.message.chat.id)
    elif call.data == "help":
        help_command(call.message.chat.id)


def help_command(chat_id: int) -> None:
    show_choice(chat_id, constants.HELP_TEXT, types.InlineKeyboardMarkup())


def rules_command(chat_id: int) -> None:
    show_choice(chat_id, constants.RULES_TEXT, reply_markup_new_game)


def go_command(chat_id: int) -> None:
    if chat_id not in games.keys():
        games[chat_id] = HangmanGame()
    games[chat_id].new_level()

    bot.send_message(chat_id, games[chat_id].current_hidden_word)
    bot.send_message(chat_id, constants.SEND_LTR_TEXT)


@bot.message_handler(content_types=['text'])
def reception_text(message: telebot.types.Message) -> None:
    if message.chat.id not in games.keys():
        show_choice(message.chat.id, '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /help', reply_markup_help)
        # show_choice(message.chat.id, constants.WARNING_TEXT, reply_markup_new_game)
    elif is_incorrect_input(message.text.lower()):
        bot.send_message(message.chat.id, constants.SEND_LTR_TEXT)
    else:
        send_game_message(message)


def send_game_message(message: telebot.types.Message) -> None:
    chat_id: int = message.chat.id
    if games[chat_id].is_true_letter(message.text.lower()):
        bot.send_message(chat_id, games[chat_id].current_hidden_word)
        if games[chat_id].is_guessed_word():
            show_choice(chat_id, constants.WIN_TEXT, reply_markup_end)
            del games[chat_id]
    else:
        bot.send_photo(chat_id, photo=games[chat_id].current_stage)
        bot.send_message(chat_id, games[chat_id].current_hidden_word)
        if games[chat_id].is_game_over():
            show_choice(chat_id, constants.GAME_OVER_TEXT % games[chat_id].current_word, reply_markup_end)
            del games[chat_id]


def show_choice(chat_id: int, text: str, reply_markup: telebot.types.InlineKeyboardMarkup) -> None:
    bot.send_message(chat_id, text=text, reply_markup=reply_markup)


def is_incorrect_input(input_text: str) -> bool:
    return len(input_text) > 1 or re.match('[–∞-—è]', input_text) is None
